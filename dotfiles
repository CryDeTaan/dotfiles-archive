#!/bin/bash

# Dotfiles installer.
#   Based on https://github.com/leonjza/dotfiles. Shouts to @leonjza
#   In truth its probably a copy, not based of anything 

# This script is structured in the following way:
#
#   Default variable values such as git path & commandline arguments
#   Helper functions such as colour output
#   Function definitions with the *actual* logic
#   Small helper to ensure the commands needed for this installer is available
#   Commandline argument parser at the bottom to decide what gets called
#
#   For more, see the README file at $gitorigin

set -e  

# static variables
gitpath="$HOME/.dotfiles"
gitorigin="https://github.com/CryDeTaan/dotfiles.git"
gitoriginSSH="git@github.com:CryDeTaan/dotfiles.git"
debug=false

# configurations this script knows how to setup
declare -a configurations=("all" "none" "zsh" "vim" "tmux")

# defaults for commandline options
install_target=false
uninstall_target=false
update=false
showusage=false

# defaults for file & config locations
oh_my_zsh="$HOME/.oh-my-zsh"
zsh_rc="$HOME/.zshrc"
vim_plugin_dir="$HOME/.vim"
vim_rc="$HOME/.vimrc"
tmux_conf="$HOME/.tmux.conf"
rc_backup_dir="$HOME/.dotfiles.d/backups"

# helper functions
# colours!

function echo_blank() { command echo -e ""; } # Blank line
function echo_start() { command echo -e "$(tput setaf 4; tput bold; tput smul)$* $(tput sgr0) \n";} # Start Script
function echo_func_start() { command echo -e "$(tput setaf 6; tput bold; tput smul)$* $(tput sgr0) \n";} # Function Start Heading.
function echo_subfunc_start() { command echo -e "$(tput setaf 4;)$* $(tput sgr0) \n";} # Start Script
function echo_handover() { command echo -e "\n$(tput setaf 5;)#### $* ####$(tput sgr0)\n";} # Start Script
function echo_func_done() { command echo -e "$(tput setaf 2; tput bold)$*$(tput sgr0)\n"; } # When a task finishes successfully
function echo_subfunc_done() { command echo -e " [+] $(tput setaf 2;)$*$(tput sgr0)\n"; } # When a task finishes successfully
function echo_yellow() { command echo -e " [*] $(tput setaf 3)$*$(tput sgr0)"; } # Task feedback.
function echo_red() { command echo -e " [!] $(tput setaf 1)$*$(tput sgr0)"; } # When a task fails
function echo() { command echo -e "$*"; } # General Information is given - I like a lot of feedback
function echo_debug() { if [ "$debug" = true ]; then command echo -e "$(tput setaf 3; tput bold)>>> $*$(tput sgr0)"; fi }

# directories!
function pushd() { command pushd "$@" > /dev/null; }
function popd() { command popd "$@" > /dev/null; }

# curl
function curl() { command curl -fsSL "$1" -o "$2"; }

# app logic
function usage() {

    cat <<EOF
                                          
 ____        _    ___  _  _           
|    \  ___ | |_ |  _||_|| | ___  ___ 
|  |  || . ||  _||  _|| || || -_||_ -|
|____/ |___||_|  |_|  |_||_||___||___|
                                                                                                                       

    Inspired by https://github.com/leonjza/dotfiles. Shouts to @leonjza
    
    Usage: dotfiles [option] [configs]

    Examples:
        dotfiles --install all
        dotfiles --install vim
        dotfiles --remove all
        dotfiles --remove vim
        dotfiles --update all
        dotfiles --check all

    Options:
        -i, --install [configs]     Install configurations (See Valid Configs)
        -r, --remove [configs]      Uninstall configurations (See Valid Configs)
        -u, --update all            Update the configuration repository

    Valid Configs:
        ${configurations[@]}

EOF

}



function install_components() {

    # check that the install target is something we know if
    validate_configuration $install_target

    # Ensure that we have the source repository ready in $gitpath
    prepare_git
    echo_debug "Installing: $install_target"

    case $install_target in
        none)
            echo_yellow "Installing nothing..."
            return
        ;;
        all)
            install_zsh
            install_vim
        ;;
        zsh)
            install_zsh
        ;;
        vim)
            install_vim
        ;;
	tmux)
            install_tmux
	;;
    esac

}


function validate_configuration() {

    # This check the user provided arguments

    local config=$1

    echo_debug "Looking for '$config' in the valid configurations.."
    for element in "${configurations[@]}"; do

        if [[ "$element" == "$config" ]]; then
            echo_debug "Configuration '$config' looks OK"
            return
        fi

    done

    echo_red "[!] $config is not a valid configuration"
    exit 1

}


function prepare_git() {

# Preparing git:
# 1. Check if a file with the name of gitpath exists - exit if this is the case.
# 2. Check if a directory with the name of gitpath exists - if so do the following check:
#       i.  Exit if the directory is not a git repository.
#       ii. If the directory is a git repository, check config to confirm
#           its has the same remote origin and perform update_repo.
# 3. Lastly if the path does not exist, perform a git clone of the repository to gitpath.

    echo_func_start "Preparing git"
    echo_yellow "Preparing git folder at: $gitpath"

    # if there is already a file called .dotfiles, error out for manual inspection
    if [[ -f $gitpath ]]; then

        echo_red "$gitpath appears to be an existing file. Inspect/remove it first, then rerun the installer to continue"
        exit 1

    fi

    # Check if the gitpath already exists, if so do some checks to make sure its 
    # in line with the repo
    if [[ -d $gitpath ]]; then
        # some more work is needed to to see if the repo is sane
        echo_yellow "$gitpath is a existing directory, inspecting it."
        pushd $gitpath

        # check if we are inside a valid git repository
        valid_repo=$(set +e; git rev-parse --is-inside-work-tree 2>/dev/null; set -e)
        if [[ ! "$valid_repo" = true ]]; then

            echo_red "$gitpath is a directory, but not a valid git repository." 
            echo_red "Move/delete it first, then rerun the install to continue."
            exit 1

        fi

        echo_yellow "$gitpath is a existing git repository,"
        echo_yellow "Inspecting it.."

        # get the remote origin of the existing repository and check it
        localorigin=$(git config --get remote.origin.url)
        echo_yellow "Local git origin is: $localorigin"

        if [[ ! "$localorigin" = $gitorigin ]]; 

            then
                echo_red "It looks like the origin for the local dotfiles repo does not match."
                echo_red "The local origin is $localorigin and it should be $gitorigin"
                exit 2

        fi

        popd

        echo_subfunc_done "Done"

        
    fi


    # if the path does not exist, just clone it. There, easy.
    if [[ ! -d $gitpath ]]; then

        echo_yellow "Git repo in $gitpath does not exist. Cloning dotfiles repository: $gitorigin"
        
        echo_handover "Over to git"

        git clone $gitorigin $gitpath

        echo_handover "Back to script"

        echo_subfunc_done "Done"
        
        return

    fi

    echo_func_done "Git prepared successfully."


}


function backup_config() {

    local config=$1

    # add a date to the config file
    local filename=$(basename $config-$(date +"%s"))

    # make sure the backup dir exists
    mkdir -p $rc_backup_dir

    # copy the config file to the backup dir
    echo_yellow "Backing up config file $config"
    echo_debug "Config backup goes to $rc_backup_dir/$filename"
    cp -f $config $rc_backup_dir/$filename

}


function install_zsh() {

    echo_func_start "Installing ZSH"

    echo_subfunc_start "Preparing for ZSH installation"

    local temp="$(mktemp)"
    

    # make sure zsh is available
    if ! hash zsh 2>/dev/null; then
        echo_red "zsh is not installed or in your PATH. Not installing this configuration."
        return
    fi

    # Ensure that *.d directory exists
    echo_yellow "Creating *.d directory in $HOME/.dotfiles.d/zshrc.d"
    mkdir -p $HOME/.dotfiles.d/zshrc.d
    echo_subfunc_done "Done"

    echo_subfunc_start "Starting oh-my-zsh installation"
    echo_yellow "Downloading oh-my-zsh installer, and"
    echo_yellow "Saving installer to $temp"
    curl "https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh" $temp

    echo_yellow "Preventing the installer from starting ZSH when its done"
    sed -i -r "s/env zsh//" $temp

    echo_yellow "Running oh-my-zsh installer..."
    echo_yellow "Using sh to run $temp"

    echo_handover "Over to the oh-my-zsh installer"

    sh $temp

    echo_handover "Back to the script"

    echo_yellow "Removing downloaded installer"
    rm -f $temp

    echo_subfunc_done "done"

    echo_subfunc_start "Installing oh-my-zsh plugins"

    echo_yellow "Using oh-my-zsh directory: $oh_my_zsh/custom/plugins"

    # Syntax highlighting
    if [[ ! -d "$oh_my_zsh/custom/plugins/zsh-syntax-highlighting" ]]; then

        echo_handover "Over to git"

        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $oh_my_zsh/custom/plugins/zsh-syntax-highlighting

        echo_handover "Back to the script"

    else
        echo_red "Syntax highlighting plugin already exists, moving on."
    fi

    # Auto suggestions
    if [[ ! -d "$oh_my_zsh/custom/plugins/zsh-autosuggestions" ]]; then

        echo_handover "Over to git"

        git clone https://github.com/zsh-users/zsh-autosuggestions.git $oh_my_zsh/custom/plugins/zsh-autosuggestions

        echo_handover "Back to the script"
        
    else
        echo_red "Autosuggestions plugin already exists, moving on."
    fi

    echo_subfunc_done "Done"

    echo_func_start "Adding my ZSH configuration"

    ## Backup the current one
    if [[ -f "$zsh_rc" ]]; then
        echo_subfunc_start "Backup current zshrc"
        backup_config $zsh_rc
        echo_subfunc_done "Done"
    fi

    
    echo_subfunc_start "Creating symlinks"

    echo_debug "Symlinking $gitpath/rc/zshrc to $zsh_rc"
    ln -sf $gitpath/rc/zshrc $zsh_rc

    echo_yellow "Symlinking *.zsh files to $HOME/.dotfiles.d/zshrc.d/"
    ln -sf $gitpath/dotfiles.d/zshrc.d/* $HOME/.dotfiles.d/zshrc.d

    echo_subfunc_done "Done"

    echo_subfunc_start "Installing custom zsh theme"

    if [[ ! -d "$$oh_my_zsh/custom/themes/" ]]; then
        echo_yellow "Creating Directories $oh_my_zsh/custom/themes"
        mkdir -p $oh_my_zsh/custom/themes/
    fi

    echo_yellow "Symlinking zsh-theme file to $oh_my_zsh/custom/themes"
    ln -sf $gitpath/config/oh-my-zsh/custom/themes/crydetaan.zsh-theme $oh_my_zsh/custom/themes/crydetaan.zsh-theme

    echo_subfunc_done "Done"

    echo_func_done "ZSH installation complete!"

}

function install_vim() {

    echo_func_start "Installing Vim configuration"

    echo_subfunc_start "Preparing for VIM installation"

    # make sure vim is available
    if ! hash vim 2>/dev/null; then
        echo_red "vim is not installed or in your PATH. Not installing this configuration."
        return
    fi

    # Ensure that directory exists
    echo_yellow "Creating *.d directory in $HOME/.dotfiles.d/vimrc.d"
    mkdir -p $HOME/.dotfiles.d/vimrc.d

    # I cannot spell, so lets do this.
    echo_yellow "Creating spell directory in $HOME/.vim/"
    mkdir -p $HOME/.vim/spell
    echo_subfunc_done "Done"

    echo_subfunc_start "Installing Vim Plugins"

    echo_yellow "Preparing the vim plugin directory at $vim_plugin_dir"
    mkdir -p $vim_plugin_dir

    echo "Adding Vim Plugins"

    # Vundle
    if [[ ! -d "$vim_plugin_dir/bundle/Vundle.vim" ]]; then

        echo_handover "Over to git"

        git clone https://github.com/gmarik/Vundle.vim $vim_plugin_dir/bundle/Vundle.vim

        echo_handover "Back to the script"

    else
        echo_red "Vundle already exists, moving one."
    fi
    echo_subfunc_done "Done"

    echo_func_start "Adding my VIM configuration"

    ## Backup the current one
    if [[ -f "$vim_rc" ]]; then
        backup_config $vim_rc
    fi

    echo_subfunc_start "Creating symlinks"

    echo_debug "Symlinking $gitpath/rc/vimrc to $vim_rc"
    ln -sf $gitpath/rc/vimrc $vim_rc

    echo_yellow "Symlinking *.vim files to $HOME/.dotfiles.d/vimrc.d/"
    ln -sf $gitpath/dotfiles.d/vimrc.d/* $HOME/.dotfiles.d/vimrc.d
    ln -sf $gitpath/config/vim/spell//* $HOME/.vim/spell/

    echo_subfunc_done "Done"

    echo_func_start "Installing vim plugin"

    echo_yellow "Running vim plugin installer"
    vim +PluginInstall +qall

    echo_subfunc_done "Done"

    echo_func_done "Vim installation complete!"

}

function install_tmux() {

    echo_func_start "Installing Tmux"

    # make sure tmux is available
    if ! hash tmux 2>/dev/null; then
        echo_red "tmux is not installed or in your PATH. Not installing this configuration."
        return
    fi

    echo_subfunc_start "Installing Tmux configuration file"

    ## Backup the current one
    if [[ -f "$tmux_conf" ]]; then
        backup_config $tmux_conf
    fi

    echo_debug "Symlinking $gitpath/rc/tmux.conf to $tmux_conf"
    ln -sf $gitpath/rc/tmux.conf $tmux_conf

    echo_subfunc_done "Done"
    echo_func_done "Tmux config install complete!"
}

function update_repo() {

    # Preparing git by running the prepare_git function
    prepare_git

    # Updating my dotfiles from git
    echo_func_start "Updating Dotfiles"

    # Running git pull
    echo_subfunc_start "Running git pull on $gitpath"
    echo_handover "Over to git"
    
    pushd $gitpath
    git pull
    popd

    echo_handover "Back to script"
    echo_subfunc_done "Done"

    # Running symlinks again in case I added new files
    echo_subfunc_start "Updating my configurations"
    echo_yellow "Updating symlinks"

    if [[ -d "$HOME/.dotfiles.d/zshrc.d/" ]]; then ln -sf $gitpath/dotfiles.d/zshrc.d/* $HOME/.dotfiles.d/zshrc.d; fi
    if [[ -d "$HOME/.dotfiles.d/vimrc.d/" ]]; then ln -sf $gitpath/dotfiles.d/vimrc.d/* $HOME/.dotfiles.d/vimrc.d; fi

    echo_subfunc_done "Done"

    # Updating oh-my-zsh plugins. Using the update_helper function to do the git pull
    echo_subfunc_start "Updating oh-my-zsh plugins"
    echo_yellow "Using oh-my-zsh directory: $oh_my_zsh/custom/plugins"

    update_helper $oh_my_zsh/custom/plugins/zsh-syntax-highlighting # Syntax highlighting
    update_helper $oh_my_zsh/custom/plugins/zsh-autosuggestions # Auto suggestions

    echo_subfunc_done "Done"

    # Updating vim plugins. Using the update_helper function to do the git pull
    echo_subfunc_start "Updating Vim plugins"
    echo_yellow "Using vim directory: $vim_plugin_dir/bundle/"

    update_helper $vim_plugin_dir/bundle/Vundle.vim

    echo_yellow "Running vim plugin installer"
    vim +PluginUpdate +qall

    echo_subfunc_done "Done"

    echo_func_done "Update complete. You may want to close/re-open your session for changes to take effect."
}

function update_helper() {

        if [[ -d "$*" ]]; then

        echo_handover "Over to git"

        pushd $*

        git pull

        popd

        echo_handover "Back to the script"
    fi

}

function restore_config() {

    local config=$1
    local base=$(basename $config)

    # search for the latest backup in the backup directory
    filename=$(ls -a $rc_backup_dir | grep $base | sort -n -t _ -k 2 | tail -1)
    echo_debug "Backup file lookup returned: $filename"

    if [[ ! "$filename" == "" ]]; then

        echo_green "Restoring last backup of $base to $config which is $filename"
        cp -f $rc_backup_dir/$filename $config

    else
        echo_yellow "No backup of $config could be found. Nothing to restore."
    fi
}



# start by checking the software needed by this installer
# if we cant find it, rather die
for cmd in "curl" "git"; do

    if ! hash $cmd 2>/dev/null; then
        echo_red "'$cmd' can not be found. Please install it before using this script."
        exit 2
    fi
    echo_debug "Using $cmd from $(which $cmd)"

done

# parse commandline arguments
if [[ $# -gt 1 ]]; then

    while [[ $# -gt 1 ]]; do
        case $1 in
        -i|--install)
        install_target="$2"
        shift # past argument
        ;;
        -r|--remove)
        uninstall_target="$2"
        shift # past argument
        ;;
        -u|--update)
        update=true
        shift # past argument
        ;;
        *)
        showusage=true
        ;;
    esac

    shift # past argument or value
    done
else
    echo_debug "Running usage(), no args -gt 1 found"
    usage
fi

# usage
if [ "$showusage" = true ]; then
    usage
    exit 2
fi

# install
if [[ ! "$install_target" = false ]]; then
    echo_start "Running install on: $install_target"
    install_components
fi

if [[ ! "$uninstall_target" = false ]]; then
    echo_start "Running uninstall on: $uninstall_target"
    uninstall_components
fi

if [[ "$update" = true ]]; then
    echo_start "Running dotfiles update"
    update_repo
fi
